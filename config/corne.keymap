/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/helper.h"

#define BASE 0
#define LOWER 1
#define RAISE 2
#define FUNC 3

#define NAV_LEFT  &mt HOME     LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt END      RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

#define XXX &none
#define ___ &trans


/* Settings */
#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 200

&mt {
    tapping-term-ms = <TAPPING_TERM_MS>;
    flavor = "tap-preferred";
    // TODO: check what this does
    // quick-tap-ms = <210>;              // repeat on tap-into-hold
    // hold-trigger-key-positions = <0>;  // tap on interrupt
};


&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Custom behaviors */

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete | hold: raise layer
ZMK_BEHAVIOR(bs_del_raise, mod_morph,
    bindings = <&lt RAISE BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)
// ------------------------------------------------------------

// tap: sticky-rshift | lshft + tap: caps-word | hold: rshift
ZMK_BEHAVIOR(srs_cw, mod_morph,
    bindings = <&sk RSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
// ------------------------------------------------------------

// tap: sticky-lshift | rshft + tap: capslock | hold: lshift
ZMK_BEHAVIOR(sls_cl, mod_morph,
    bindings = <&sk LSHFT>, <&kp CAPS>;
    mods = <(MOD_RSFT)>;
)
// ------------------------------------------------------------


// tap: space | shift+space: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
// ------------------------------------------------------------

// ZMK_LAYER(layer_name,
//      // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//           ___           ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___           ___ 
//      // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//           ___           ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___           ___
//      // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//           ___           ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___           ___
//      // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
//                                                     ___           ___           ___                 ___           ___           ___
//      //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
// )

ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &lt LOWER TAB  &kp Q          &kp W         &kp E         &kp R         &kp T               &kp Y         &kp U        &kp I         &kp O          &kp P         &lt FUNC F12
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &mt LCTRL ESC  &kp A          &kp S         &kp D         &kp F         &kp G               &kp H         &kp J        &kp K         &kp L          &kp SEMI      &mt RCTRL SQT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &sls_cl        &mt LALT Z     &kp X         &kp C         &kp V         &kp B               &kp N         &kp M        &kp COMMA     &kp DOT        &mt LALT FSLH &srs_cw
     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                                    &kp LGUI    &lt_spc LOWER 0 &mt LG(LSHFT) RET   &mt RALT RET  &bs_del_raise &kp LGUI
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(lower_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
           ___          &kp N1        &kp N2        &kp N3        &kp N4        &kp N5              &kp N6        &kp N7        &kp N8        &kp N9       &kp N0          &kp KP_NLCK
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           ___          &kp C_BRI_DN  &kp C_BRI_UP  &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP        &kp KP_PLUS   &kp N4        &kp N5        &kp N6       &kp KP_MULTIPLY &kp KP_DOT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &kp KP_MINUS  &kp N1        &kp N2        &kp N3       &kp KP_DIVIDE   &kp KP_DOT
     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                                    ___           ___           ___                 ___           ___           &kp N0
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
)


ZMK_LAYER(raise_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp GRAVE        &kp EXCL    &kp AT        &kp HASH      &kp DLLR      &kp PRCNT            &kp PIPE     &kp LBKT      &kp RBKT      &kp LBRC      &kp RBRC      &kp UNDER
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &mt LCTRL TILDE  &kp AMPS    &kp ASTRK     &kp LS(SEMI)  &kp CARET     NAV_DEL              NAV_LEFT     NAV_DOWN      NAV_UP        NAV_RIGHT     &kp LPAR      &kp RPAR
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp LS( PSCRN) &kp LC(PSCRN) ___           &kp PSCRN     &kp PLUS      &kp MINUS            &kp EQUAL    ___           ___           ___           ___           &kp BSLH
     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                                    ___           NAV_BSPC      ___                 ___           ___           ___
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
)


ZMK_LAYER(function_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ___           &kp F1        &kp F2        &kp F3        &kp F4         &kp F5             &kp F6         &kp F7         &kp F8         &kp F9         &kp F10     ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           &kp F6        &kp F7        &kp F8        &kp F9         &kp F10            &kp F11        &kp F11        &kp F11        &kp F11        &kp F11     ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           ___           ___           ___           &kp F11        &kp F12            ___            ___            ___         ___            ___            ___
     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                                    ___           ___           ___                 ___           ___           ___
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
       )

                
/* vim: set filetype=c: */
